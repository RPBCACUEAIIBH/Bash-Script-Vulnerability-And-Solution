#! /bin/bash



function SafeCode ()
{
  # Your code comes here...
  echo -e "\n$@\n"
}



{ # Security Measure #1 - Code between brackets are parsed at once, so can not be edited by other process.
  OriginalPermissions=$(stat -c "%a" "$0") # Get original premissions
  if [[ $(whoami) == "root" && ! -z $(echo $OriginalPermissions | grep -E "2|3|6|7") ]] # Security Measure #2 - Temporarilty revoking own write permission if running as "root".
  then
    chmod a-w "$0"
    echo -e "\nWarning: Executed as root while writable -> Revoking write access while running as root.\n(This may cause loss of write permissions if interrupted, but should prevent malicious processes gaining root access by editing this script while running as root!)"
  fi
  
  # If the script is short you can write code directly between these brackets, if it's long, you may need to break it up to several functions due to bash's limitad capacity to read group commands.
  SafeCode $@ # call function an pass all arguments.
  
  # Restore it's onw write permission
  if [[ $(whoami) == "root" && ! -z $(echo $OriginalPermissions | grep -E "2|3|6|7") ]]
  then
    read -p "Do you want to restore original permissions? (If yes, recommended to examine it before next run. y/n): " Yy
    if [[ $Yy == *[Yy] ]]
    then
      echo -e "Restoring write access.\n"
      chmod "$OriginalPermissions" "$0"
    else
      echo ""
    fi
  fi
  exit 0 # Security Measure #3 - exit before any appended command could be executed, just in case...
}
